"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _utils = require("../utils");

var _Card = _interopRequireDefault(require("./Card"));

var _CardBody = _interopRequireDefault(require("./CardBody"));

var _CardTitle = _interopRequireDefault(require("./CardTitle"));

var _CardSubtitle = _interopRequireDefault(require("./CardSubtitle"));

var _Tags = _interopRequireDefault(require("../badge/Tags"));

var _Button = _interopRequireDefault(require("../button/Button"));

var _Collapse = _interopRequireDefault(require("../collapse/Collapse"));

var _excluded = ["title", "subtitle", "verifiedImage", "noBorder", "hasAdditionalBadge", "additionalText", "imageRightLink", "imageRightClick", "bodyClassName", "subtitleClassName", "detailClassName", "detailImageLink", "detailImageWidth", "detailButtonTitle", "detailButtonClick", "cardInfoClassName", "toggleImage", "toggleImageClick", "onEntering", "onExiting", "cardInfoOpen", "accordionData", "className", "buttonClassName", "cssModule", "cardExtraInfo", "dataAutomationDetailButton", "dataAutomationInfoImg", "dataAutomationRightImg"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var propTypes = {
  title: _propTypes["default"].string,
  subtitle: _propTypes["default"].string,
  verifiedImage: _propTypes["default"].string,
  noBorder: _propTypes["default"].bool,
  hasAdditionalBadge: _propTypes["default"].bool,
  additionalText: _propTypes["default"].string,
  imageRightLink: _propTypes["default"].string,
  imageRightClick: _propTypes["default"].func,
  bodyClassName: _propTypes["default"].string,
  subtitleClassName: _propTypes["default"].string,
  detailClassName: _propTypes["default"].string,
  detailImageLink: _propTypes["default"].string,
  detailImageWidth: _propTypes["default"].number,
  detailButtonTitle: _propTypes["default"].string,
  detailButtonClick: _propTypes["default"].func,
  cardInfoClassName: _propTypes["default"].string,
  toggleImage: _propTypes["default"].string,
  toggleImageClick: _propTypes["default"].func,
  onEntering: _propTypes["default"].func,
  onExiting: _propTypes["default"].func,
  cardInfoOpen: _propTypes["default"].any,
  accordionData: _propTypes["default"].any,
  cardExtraInfo: _propTypes["default"].any,
  className: _propTypes["default"].string,
  buttonClassName: _propTypes["default"].string,
  cssModule: _propTypes["default"].object,
  dataAutomationDetailButton: _propTypes["default"].string,
  dataAutomationInfoImg: _propTypes["default"].string,
  dataAutomationRightImg: _propTypes["default"].string
};
var defaultProps = {
  noBorder: false,
  detailImageWidth: 200
};

var CardGarage = function CardGarage(props) {
  var title = props.title,
      subtitle = props.subtitle,
      verifiedImage = props.verifiedImage,
      noBorder = props.noBorder,
      hasAdditionalBadge = props.hasAdditionalBadge,
      additionalText = props.additionalText,
      imageRightLink = props.imageRightLink,
      imageRightClick = props.imageRightClick,
      bodyClassName = props.bodyClassName,
      subtitleClassName = props.subtitleClassName,
      detailClassName = props.detailClassName,
      detailImageLink = props.detailImageLink,
      detailImageWidth = props.detailImageWidth,
      detailButtonTitle = props.detailButtonTitle,
      detailButtonClick = props.detailButtonClick,
      cardInfoClassName = props.cardInfoClassName,
      toggleImage = props.toggleImage,
      toggleImageClick = props.toggleImageClick,
      onEntering = props.onEntering,
      onExiting = props.onExiting,
      cardInfoOpen = props.cardInfoOpen,
      accordionData = props.accordionData,
      className = props.className,
      buttonClassName = props.buttonClassName,
      cssModule = props.cssModule,
      cardExtraInfo = props.cardExtraInfo,
      dataAutomationDetailButton = props.dataAutomationDetailButton,
      dataAutomationInfoImg = props.dataAutomationInfoImg,
      dataAutomationRightImg = props.dataAutomationRightImg,
      attributes = _objectWithoutProperties(props, _excluded);

  var classes = (0, _utils.mapToCssModules)((0, _classnames["default"])('card-garage', noBorder ? 'border-0' : false, className), cssModule);
  var cardInfoClasses = (0, _utils.mapToCssModules)((0, _classnames["default"])('card-info', 'pt-2', 'pb-4', cardInfoClassName));
  var cardDetailClasses = (0, _utils.mapToCssModules)((0, _classnames["default"])('card-detail', 'pt-3', detailClassName));
  var subtitleClasses = (0, _utils.mapToCssModules)((0, _classnames["default"])('mb-2', 'text-muted', subtitleClassName));
  var bodyClasses = (0, _utils.mapToCssModules)((0, _classnames["default"])('pb-4', bodyClassName));
  var buttonClasses = (0, _utils.mapToCssModules)((0, _classnames["default"])('mt-3', buttonClassName));
  return /*#__PURE__*/_react["default"].createElement(_Card["default"], _extends({
    className: classes
  }, attributes), /*#__PURE__*/_react["default"].createElement(_CardBody["default"], {
    className: bodyClasses
  }, imageRightLink && /*#__PURE__*/_react["default"].createElement("div", {
    role: "button",
    "aria-hidden": "true",
    onClick: imageRightClick,
    "data-automation": dataAutomationRightImg || 'button_right_img_link'
  }, /*#__PURE__*/_react["default"].createElement("img", {
    src: imageRightLink,
    className: "edit-pen",
    alt: "icon-right-link",
    loading: "lazy"
  })), title && /*#__PURE__*/_react["default"].createElement(_CardTitle["default"], {
    tag: "h5"
  }, title, ' ', verifiedImage && /*#__PURE__*/_react["default"].createElement("img", {
    src: verifiedImage,
    className: "mx-1",
    alt: "icon-verified",
    loading: "lazy"
  })), subtitle && /*#__PURE__*/_react["default"].createElement(_CardSubtitle["default"], {
    tag: "h6",
    className: subtitleClasses
  }, subtitle), hasAdditionalBadge ? /*#__PURE__*/_react["default"].createElement(_Tags["default"], {
    title: additionalText,
    pill: true,
    color: "success-light",
    textColor: "success",
    size: "sm"
  }) : /*#__PURE__*/_react["default"].createElement("br", null), /*#__PURE__*/_react["default"].createElement("div", {
    className: cardDetailClasses
  }, detailImageLink && /*#__PURE__*/_react["default"].createElement("img", {
    src: detailImageLink,
    width: detailImageWidth,
    alt: "img-car-detail",
    loading: "lazy"
  }), detailButtonTitle && /*#__PURE__*/_react["default"].createElement(_Button["default"], {
    className: buttonClasses,
    onClick: detailButtonClick,
    outline: true,
    size: "sm",
    "data-automation": dataAutomationDetailButton || 'button_detail'
  }, detailButtonTitle))), toggleImage && /*#__PURE__*/_react["default"].createElement("div", {
    className: cardInfoClasses
  }, cardExtraInfo, /*#__PURE__*/_react["default"].createElement("img", {
    role: "presentation",
    src: toggleImage,
    onClick: toggleImageClick,
    className: "arrow-collapse",
    alt: "icon-arrow-collapse",
    loading: "lazy",
    "data-automation": dataAutomationInfoImg || 'icon_info'
  }), /*#__PURE__*/_react["default"].createElement(_Collapse["default"], {
    isOpen: cardInfoOpen,
    onEntering: onEntering,
    onExiting: onExiting
  }, accordionData)));
};

CardGarage.propTypes = propTypes;
CardGarage.defaultProps = defaultProps;
var _default = CardGarage;
exports["default"] = _default;
//# sourceMappingURL=CardGarage.js.map