{"version":3,"sources":["../../../src/components/label/AutoWidthLabels.js"],"names":["propTypes","maxChar","PropTypes","number","labels","array","color","string","className","AutoWidthLabels","undefined","length","funcLengthSum","accum","value","countLabels","label","reduce","values","out","push","hoverLabel","join","map"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AAEA,IAAMA,SAAS,GAAG;AAChBC,EAAAA,OAAO,EAAEC,sBAAUC,MADH;AAEhBC,EAAAA,MAAM,EAAEF,sBAAUG,KAFF;AAGhBC,EAAAA,KAAK,EAAEJ,sBAAUK,MAHD;AAIhBC,EAAAA,SAAS,EAAEN,sBAAUK;AAJL,CAAlB;;AAOA,IAAME,eAAe,GAAG,SAAlBA,eAAkB,OAAgD;AAAA,0BAA7CR,OAA6C;AAAA,MAA7CA,OAA6C,6BAAnC,EAAmC;AAAA,MAA/BG,MAA+B,QAA/BA,MAA+B;AAAA,MAAvBE,KAAuB,QAAvBA,KAAuB;AAAA,MAAhBE,SAAgB,QAAhBA,SAAgB;;AACtE,MAAIJ,MAAM,KAAKM,SAAX,IAAwBN,MAAM,CAACO,MAAP,KAAkB,CAA9C,EAAiD;AAC/C,WAAO,IAAP;AACD;;AAED,WAASC,aAAT,CAAuBC,KAAvB,EAA8BC,KAA9B,EAAqC;AACnC,WAAOD,KAAK,GAAGC,KAAK,CAACH,MAArB;AACD;;AAED,MAAII,WAAW,GAAG,GAAlB;AAEA,MAAMC,KAAK,GAAGZ,MAAM,CAACa,MAAP,CACZ,UAACC,MAAD,EAASJ,KAAT,EAAmB;AACjBC,IAAAA,WAAW,GAAGG,MAAM,MAAN,CAAUD,MAAV,CAAiBL,aAAjB,EAAgC,CAAhC,CAAd;;AACA,QAAIG,WAAW,GAAGD,KAAK,CAACH,MAApB,GAA6BV,OAAjC,EAA0C;AACxCiB,MAAAA,MAAM,CAACC,GAAP,CAAWC,IAAX,CAAgBN,KAAhB;AACA,aAAOI,MAAP;AACD;;AAEDA,IAAAA,MAAM,MAAN,CAAUE,IAAV,CAAeN,KAAf;AACA,WAAOI,MAAP;AACD,GAVW,EAWZ;AAAE,UAAI,EAAN;AAAUC,IAAAA,GAAG,EAAE;AAAf,GAXY,CAAd;AAcA,MAAIE,UAAU,GAAG,EAAjB;;AACA,MAAIL,KAAK,CAACG,GAAN,CAAUR,MAAV,GAAmB,CAAvB,EAA0B;AACxBU,IAAAA,UAAU,GAAGL,KAAK,CAACG,GAAN,CAAUG,IAAV,CAAe,IAAf,CAAb;AACD;;AAED,sBACE,kEACGN,KAAK,MAAL,CAASO,GAAT,CAAa,UAACT,KAAD;AAAA,wBACZ,gCAAC,iBAAD;AAAO,MAAA,GAAG,EAAEA,KAAZ;AAAmB,MAAA,KAAK,EAAER,KAA1B;AAAiC,MAAA,IAAI,EAAC,IAAtC;AAA2C,MAAA,SAAS,EAAEE;AAAtD,OACGM,KADH,CADY;AAAA,GAAb,CADH,EAMGE,KAAK,CAACG,GAAN,CAAUR,MAAV,GAAmB,CAAnB,iBACC,gCAAC,iBAAD;AACE,IAAA,KAAK,EAAEU,UADT;AAEE,IAAA,GAAG,EAAC,QAFN;AAGE,IAAA,KAAK,EAAEf,KAHT;AAIE,IAAA,IAAI,EAAC,IAJP;AAKE,IAAA,SAAS,EAAEE;AALb,KAOGQ,KAAK,CAACG,GAAN,CAAUR,MAPb,MAPJ,CADF;AAoBD,CAlDD;;AAoDAF,eAAe,CAACT,SAAhB,GAA4BA,SAA5B;eAEeS,e","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport Badge from '../badge/Badge';\n\nconst propTypes = {\n  maxChar: PropTypes.number,\n  labels: PropTypes.array,\n  color: PropTypes.string,\n  className: PropTypes.string,\n};\n\nconst AutoWidthLabels = ({ maxChar = 18, labels, color, className }) => {\n  if (labels === undefined || labels.length === 0) {\n    return null;\n  }\n\n  function funcLengthSum(accum, value) {\n    return accum + value.length;\n  }\n\n  let countLabels = 100;\n\n  const label = labels.reduce(\n    (values, value) => {\n      countLabels = values.in.reduce(funcLengthSum, 0);\n      if (countLabels + value.length > maxChar) {\n        values.out.push(value);\n        return values;\n      }\n\n      values.in.push(value);\n      return values;\n    },\n    { in: [], out: [] },\n  );\n\n  let hoverLabel = '';\n  if (label.out.length > 0) {\n    hoverLabel = label.out.join(', ');\n  }\n\n  return (\n    <>\n      {label.in.map((value) => (\n        <Badge key={value} color={color} size=\"sm\" className={className}>\n          {value}\n        </Badge>\n      ))}\n      {label.out.length > 0 && (\n        <Badge\n          title={hoverLabel}\n          key=\"others\"\n          color={color}\n          size=\"sm\"\n          className={className}\n        >\n          {label.out.length}+\n        </Badge>\n      )}\n    </>\n  );\n};\n\nAutoWidthLabels.propTypes = propTypes;\n\nexport default AutoWidthLabels;\n"],"file":"AutoWidthLabels.js"}