{"version":3,"sources":["../../../src/components/label/Label.js"],"names":["colWidths","stringOrNumberProp","PropTypes","oneOfType","number","string","columnProps","bool","shape","size","order","offset","propTypes","children","node","hidden","check","tag","tagPropType","className","cssModule","object","xs","sm","md","lg","xl","xxl","widths","array","defaultProps","getColumnSizeClass","isXs","colWidth","colSize","Label","props","Tag","htmlFor","attributes","colClasses","forEach","i","columnProp","colClass","colSizeInterfix","push","classes","length"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType, isObject } from '../utils';\n\nconst colWidths = ['xs', 'sm', 'md', 'lg', 'xl', 'xxl'];\nconst stringOrNumberProp = PropTypes.oneOfType([\n  PropTypes.number,\n  PropTypes.string,\n]);\n\nconst columnProps = PropTypes.oneOfType([\n  PropTypes.bool,\n  PropTypes.string,\n  PropTypes.number,\n  PropTypes.shape({\n    size: stringOrNumberProp,\n    order: stringOrNumberProp,\n    offset: stringOrNumberProp,\n  }),\n]);\n\nconst propTypes = {\n  children: PropTypes.node,\n  hidden: PropTypes.bool,\n  check: PropTypes.bool,\n  size: PropTypes.string,\n  for: PropTypes.string,\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  xs: columnProps,\n  sm: columnProps,\n  md: columnProps,\n  lg: columnProps,\n  xl: columnProps,\n  xxl: columnProps,\n  widths: PropTypes.array,\n};\n\nconst defaultProps = {\n  tag: 'label',\n  widths: colWidths,\n};\n\nconst getColumnSizeClass = (isXs, colWidth, colSize) => {\n  if (colSize === true || colSize === '') {\n    return isXs ? 'col' : `col-${colWidth}`;\n  }\n  if (colSize === 'auto') {\n    return isXs ? 'col-auto' : `col-${colWidth}-auto`;\n  }\n\n  return isXs ? `col-${colSize}` : `col-${colWidth}-${colSize}`;\n};\n\nconst Label = (props) => {\n  const {\n    className,\n    cssModule,\n    hidden,\n    widths,\n    tag: Tag,\n    check,\n    size,\n    for: htmlFor,\n    ...attributes\n  } = props;\n\n  const colClasses = [];\n\n  widths.forEach((colWidth, i) => {\n    let columnProp = props[colWidth];\n\n    delete attributes[colWidth];\n\n    if (!columnProp && columnProp !== '') {\n      return;\n    }\n\n    const isXs = !i;\n    let colClass;\n\n    if (isObject(columnProp)) {\n      const colSizeInterfix = isXs ? '-' : `-${colWidth}-`;\n      colClass = getColumnSizeClass(isXs, colWidth, columnProp.size);\n\n      colClasses.push(\n        mapToCssModules(\n          classNames({\n            [colClass]: columnProp.size || columnProp.size === '',\n            [`order${colSizeInterfix}${columnProp.order}`]:\n              columnProp.order || columnProp.order === 0,\n            [`offset${colSizeInterfix}${columnProp.offset}`]:\n              columnProp.offset || columnProp.offset === 0,\n          }),\n        ),\n        cssModule,\n      );\n    } else {\n      colClass = getColumnSizeClass(isXs, colWidth, columnProp);\n      colClasses.push(colClass);\n    }\n  });\n\n  const classes = mapToCssModules(\n    classNames(\n      className,\n      hidden ? 'visually-hidden' : false,\n      check ? 'form-check-label' : false,\n      size ? `col-form-label-${size}` : false,\n      colClasses,\n      colClasses.length ? 'col-form-label' : false,\n    ),\n    cssModule,\n  );\n\n  return <Tag htmlFor={htmlFor} {...attributes} className={classes} />;\n};\n\nLabel.propTypes = propTypes;\nLabel.defaultProps = defaultProps;\n\nexport default Label;\n"],"file":"Label.js"}