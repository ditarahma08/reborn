{"version":3,"file":"index.server.js","sourceRoot":"","sources":["../src/index.server.ts"],"names":[],"mappings":"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","sourcesContent":["import { RewriteFrames } from '@sentry/integrations';\nimport { configureScope, getCurrentHub, init as nodeInit, Integrations } from '@sentry/node';\nimport { logger } from '@sentry/utils';\n\nimport { instrumentServer } from './utils/instrumentServer';\nimport { MetadataBuilder } from './utils/metadataBuilder';\nimport { NextjsOptions } from './utils/nextjsOptions';\nimport { addIntegration } from './utils/userIntegrations';\n\nexport * from '@sentry/node';\n\n// Here we want to make sure to only include what doesn't have browser specifics\n// because or SSR of next.js we can only use this.\nexport { ErrorBoundary, withErrorBoundary } from '@sentry/react';\n\n/** Inits the Sentry NextJS SDK on node. */\nexport function init(options: NextjsOptions): void {\n  if (options.debug) {\n    logger.enable();\n  }\n\n  logger.log('Initializing SDK...');\n\n  if (sdkAlreadyInitialized()) {\n    logger.log('SDK already initialized');\n    return;\n  }\n\n  const metadataBuilder = new MetadataBuilder(options, ['nextjs', 'node']);\n  metadataBuilder.addSdkMetadata();\n  options.environment = options.environment || process.env.NODE_ENV;\n  // TODO capture project root and store in an env var for RewriteFrames?\n  addServerIntegrations(options);\n  // Right now we only capture frontend sessions for Next.js\n  options.autoSessionTracking = false;\n\n  nodeInit(options);\n  configureScope(scope => {\n    scope.setTag('runtime', 'node');\n  });\n\n  logger.log('SDK successfully initialized');\n}\n\nfunction sdkAlreadyInitialized(): boolean {\n  const hub = getCurrentHub();\n  return !!hub.getClient();\n}\n\nconst SOURCEMAP_FILENAME_REGEX = /^.*\\/\\.next\\//;\n\nconst defaultRewriteFramesIntegration = new RewriteFrames({\n  iteratee: frame => {\n    frame.filename = frame.filename?.replace(SOURCEMAP_FILENAME_REGEX, 'app:///_next/');\n    return frame;\n  },\n});\n\nconst defaultHttpTracingIntegration = new Integrations.Http({ tracing: true });\n\nfunction addServerIntegrations(options: NextjsOptions): void {\n  if (options.integrations) {\n    options.integrations = addIntegration(defaultRewriteFramesIntegration, options.integrations);\n  } else {\n    options.integrations = [defaultRewriteFramesIntegration];\n  }\n\n  if (options.tracesSampleRate !== undefined || options.tracesSampler !== undefined) {\n    options.integrations = addIntegration(defaultHttpTracingIntegration, options.integrations, {\n      Http: { keyPath: '_tracing', value: true },\n    });\n  }\n}\n\nexport { withSentryConfig } from './config';\nexport { withSentry } from './utils/withSentry';\n\n// wrap various server methods to enable error monitoring and tracing\ninstrumentServer();\n"]}